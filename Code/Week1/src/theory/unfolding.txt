Unfolding of the recurrence equation

What is the tightest bound on the runtime of method f(int x)?

public static int f(int x) {

	if(x<1) { // 2
		return 1; // 1 
	} else {
		return f(x-1) + f(x-1); // T(n-1) + T(n-1) + 2
	}
	
}

- - - - - - - - -

[n: input size]

Recurrence equation:
T(n) = c1 + 2T(n-1) [if n>0]
T(0) = c0

[We want a formula for T(n)= that does not involve T]

T(n) = c1 + 2T(n-1)
= c1 + 2(c1 + 2T(n-2)) [by T(n-1)=c1 + 2T(n-2)]
= 3c1 + 4T(n-2) [by arithmetic]
= 3c1 + 4(c1 + 2T(n-3)) [by T(n-2)=c1 + 2T(n-3)]
= 7c1 + 8T(n-3) [by arithmetic]
= ...
= (2^k -1)c1 + 2^k*T(n-k) [by repeating k times]
= (2^n -1)c1 + 2^n*T(n-n) [by letting k = n]
= (2^n -1)c1 + 2^n*T(0)
= (2^n -1)c1 + 2^n*c0 [by T(0)=c0]
----
= (2^n)c1 - c1 + (2^n)c0 [by arithmetic]
= (2^n)(c1+c0) - c1 [by arithmetic]
= (2^n)c1 - c0 [by renaming constants]
We can drop the constant, because it does not change the time complexity in a significant way.

-> O(2^n)